<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:se="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd">
     
       <!-- 启动扫描所有的controller -->
     <context:component-scan base-package="com.dhgate.controller" ></context:component-scan>
    <!-- <mvc:interceptors>
        <mvc:interceptor>配置局部拦截器，需要满足下列路径条件
            <mvc:mapping path="/twPortal/**"/>
            <mvc:mapping path="/twloan/**"/>
            <mvc:mapping path="/bankcard/**"/>
            <mvc:mapping path="/mytw/**"/>
            <mvc:mapping path="/lfLoan/loan/myLoan**"/>
            <mvc:mapping path="/lfLoan/loan/repaySuccess**"/>
            <mvc:mapping path="/lfLoan/loan/needRepay**"/>
            <mvc:mapping path="/lfLoan/loan/userRepayAcount**"/>
            <mvc:mapping path="/lfLoan/loan/applyDetail**"/>
            <mvc:mapping path="/lfLoan/loan/applying**"/>
            <mvc:mapping path="/lfLoan/loan/applySuccess**"/>
            <bean id="loginInterceptor" class="com.dhgate.creditloan.web.interceptor.TwLoginInterceptor"></bean>自定义拦截器注册
        </mvc:interceptor>
        我们可以直接在者注册自定义拦截器Bean来配置全局拦截器，会对所有请求拦截
    </mvc:interceptors> -->

    <!--  主要作用于@Controller，激活该模式
       下面是一种简写形式，完全可以手动配置替代这种简写形式；
        它会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,
          是spring MVC为@Controllers分发请求所必须的
    -->
     
     <mvc:annotation-driven/>

    <!--<aop:aspectj-autoproxy />-->
     <!-- 这里拦截器还有一种配置方法【针对路径进行配置】 推荐使用这个，方便直观-->
    <!--<mvc:interceptors>-->
        <!--<mvc:interceptor>-->
        <!--<mvc:mapping path="/openapi/*"/>-->
            <!--<bean class="com.dhgate.creditloan.web.interceptor.SignInterceptor"></bean>-->
        <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->
     
     <!--<mvc:interceptors>-->
    	<!--&lt;!&ndash; <mvc:interceptor>-->
	    	<!--<mvc:mapping path="/example/*/"/>-->
		 	<!--<bean class="com.emotte.springmvc.web.filter.LoginAnnotationInterceptor"></bean>-->
        <!--</mvc:interceptor> &ndash;&gt;-->
    	<!--<mvc:interceptor>-->
	    	<!--<mvc:mapping path="/dhpayservice/customer/**"/>-->
	    	<!--<mvc:mapping path="/dhpayservice/account/paymethod/**"/>-->
	    	<!--<mvc:mapping path="/dhpayservice/antifraud/event/**"/>-->
	    	<!--<mvc:mapping path="/dhpayservice/operation/**"/>-->
	    	<!--<mvc:mapping path="/dhpayservice/transfer/**"/>-->
	    	<!--<mvc:mapping path="/dhpayservice/remittance/**"/>-->
	    	<!--<mvc:mapping path="/dhpayservice/transferMatchAudit/**"/>-->
	    	<!--<mvc:mapping path="/dhpayservice/transferMatchBatch/**"/>-->
	    	<!--<mvc:mapping path="/dhpayservice/transferMatchDetail/**"/>-->
	    	<!--<mvc:mapping path="/dhpayservice/transferMatchUpload/**"/>-->
		 	<!--<bean class="com.dhpay.web.filter.AuthorityAnnotationInterceptor"></bean>-->
        <!--</mvc:interceptor>-->
     	<!--&lt;!&ndash; <mvc:interceptor>-->
			<!--<mvc:mapping path="/**"/>-->
			<!--<bean class="com.dhpay.web.filter.AuthorityAnnotationInterceptor"></bean>-->
     	<!--</mvc:interceptor> &ndash;&gt;-->
     <!--</mvc:interceptors>-->
     
     <!-- 全局配置 -->
    <!-- <mvc:interceptors>
    	<bean class="com.web.liyt.web.filter.MyInterceptor"></bean>
    	<bean class="com.dhpay.web.filter.AuthorityAnnotationInterceptor"></bean>
    </mvc:interceptors> -->
    
    
    <!-- 配置js，css等静态文件直接映射到对应的文件夹，不被DispatcherServlet处理 -->    
    
    <mvc:resources location="/js/" mapping="/js/**"/>
    <mvc:resources location="/css/" mapping="/css/**"/>
    <mvc:resources location="/img/" mapping="/img/**"/>
    <mvc:resources location="/static/" mapping="/static/**"/>

    <!-- jsp页面解析器，当Controller返回XXX字符串时，先通过拦截器，然后该类就会在/WEB-INF/views/目录下，查找XXX.jsp文件-->
    <!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
    	<property name="prefix" value="/jsp/"></property>
    	<property name="suffix" value=".jsp"></property>
    </bean> -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
	p:maxUploadSize="5120000" p:maxInMemorySize="512" p:defaultEncoding="utf-8" />

    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes" value = "text/plain;charset=UTF-8" />
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

<!-- 配置Velocity视图解析器 -->
    <bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
        <property name="cache" value="false"/>
        <property name="order" value="1"/>
        <property name="suffix" value=".vm"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
    </bean>
    
    <!-- 配置Velocity引擎 -->
    <bean id="velocityConfigurer" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath" value="/WEB-INF/view/"/>
        <property name="configLocation" value="classpath:velocity.properties" ignore-unresolvable="true" />
    </bean>
</beans>